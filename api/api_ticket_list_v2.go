/*
巨量方舟

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
    . "github.com/wenxtech/ocean_engine_agent_go/models"
)


// TicketListV2APIService TicketListV2API service
type TicketListV2APIService service

type ApiTicketListV2PostRequest struct {
	ctx context.Context
	ApiService *TicketListV2APIService
	page *int64
	ticketApp *string
	size *int64
	ticketTabType *string
	createTimeStart *string
	createTimeEnd *string
	ticketStatus *string
}

func (r *ApiTicketListV2PostRequest) Page(page int64) *ApiTicketListV2PostRequest {
	r.page = &page
	return r
}

func (r *ApiTicketListV2PostRequest) TicketApp(ticketApp string) *ApiTicketListV2PostRequest {
	r.ticketApp = &ticketApp
	return r
}

func (r *ApiTicketListV2PostRequest) Size(size int64) *ApiTicketListV2PostRequest {
	r.size = &size
	return r
}

func (r *ApiTicketListV2PostRequest) TicketTabType(ticketTabType string) *ApiTicketListV2PostRequest {
	r.ticketTabType = &ticketTabType
	return r
}

func (r *ApiTicketListV2PostRequest) CreateTimeStart(createTimeStart string) *ApiTicketListV2PostRequest {
	r.createTimeStart = &createTimeStart
	return r
}

func (r *ApiTicketListV2PostRequest) CreateTimeEnd(createTimeEnd string) *ApiTicketListV2PostRequest {
	r.createTimeEnd = &createTimeEnd
	return r
}

func (r *ApiTicketListV2PostRequest) TicketStatus(ticketStatus string) *ApiTicketListV2PostRequest {
	r.ticketStatus = &ticketStatus
	return r
}

func (r *ApiTicketListV2PostRequest) Execute() (*TicketListV2Response, *http.Response, error) {
	return r.ApiService.buildExecute(r)
}

func (r *ApiTicketListV2PostRequest) WithLog(enable bool) *ApiTicketListV2PostRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, ContextEnableLog, true)
	}
	return r
}

/*
TicketListV2Post 工单列表



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTicketListV2PostRequest
*/
func (a *TicketListV2APIService) Post(ctx context.Context) *ApiTicketListV2PostRequest {
	return &ApiTicketListV2PostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TicketListV2Response
func (a *TicketListV2APIService) buildExecute(r *ApiTicketListV2PostRequest) (*TicketListV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []FormFile
		localVarReturnValue  *TicketListV2Response
	)
	
	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath, err := a.client.Cfg.ServerURLWithContext(r.ctx, "TicketListV2APIService.TicketListV2Post")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ticket/list/V2"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.page == nil {
		return localVarReturnValue, nil, reportError("page is required and must be specified")
	}
	if r.ticketApp == nil {
		return localVarReturnValue, nil, reportError("ticketApp is required and must be specified")
	}
	if r.size == nil {
		return localVarReturnValue, nil, reportError("size is required and must be specified")
	}
	if r.ticketTabType == nil {
		return localVarReturnValue, nil, reportError("ticketTabType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "page", r.page, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "ticketApp", r.ticketApp, "")
	if r.createTimeStart != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "createTimeStart", r.createTimeStart, "")
	}
	if r.createTimeEnd != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "createTimeEnd", r.createTimeEnd, "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "size", r.size, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "ticketTabType", r.ticketTabType, "")
	if r.ticketStatus != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "ticketStatus", r.ticketStatus, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r.ctx, req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
